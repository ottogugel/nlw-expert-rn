### Criando o projeto

digitar npx create-expo-app --template

escolher navigation (typescript)

informar um nome do aplicativo

e depois dar cd nome da pasta e code .

deletar pasta app, components e constants

npx expo start para iniciar o app

instalar o nativewind@2.0.11
instalar o tailwindcss@3.3.2 --save-dev

executar npx tailwindcss init

colocar no tailwind.config.js
content: ["./src/app/**/*.{ts, tsx}", "./src/components/**/*.{ts, tsx}"],

colocar no babel.config.js ["nativewind/babel"],

criar um arquivo types para definir poder utilizar o className no typescript

criar um arquivo _layout.tsx para que utilize em todas as telas o mesmo background.

rodar npx expo install expo-font @expo-google-fonts/inter

fazer o props

antes da função
type HeaderProps = {
  title: string;
};

na função export function Header({ title }: HeaderProps)
na tag text {title}

para utilizar icones import { } from '@expo/vector-icons'

nesse caso aqui para não aparecer o carrinho foi definido valor 0 na variavel
e caso ele seja maior do que 0 ele irá aparecer.

export function Header({ title, cartQuantityItems = 0 }: HeaderProps)

      {/* CASO O CARRINHO SEJA 0 NÃO IRÁ APARECER O ÍCONE */}
      {
        cartQuantityItems > 0 &&
        <TouchableOpacity className="relative">
          <View className="bg-lime-300 w-4 h-4 rounded-full flex items-center justify-center top-2 z-10 -right-3.5">
            <Text className="text-slate-900 font-bold text-xs">
              {cartQuantityItems}
            </Text>
          </View>

          <Feather name="shopping-bag" color={colors.white} size={24} />
        </TouchableOpacity>
      }

0.7 = 70%

...rest = todas as outras tipagens que eu não extrai explicitamente coloca aqui dentro para repassar para a tag (passable), quando voltar para o componente vai aparecer todas as tipagens do botão.

instalar npm i clsx

usar o link do expo-router para navegar até o produto, faz a interpolação
<Link href={`/product/${id}`}> <Product /> </Link>

interpolação = chaves e com crase.

{"\u2022"} = ponto na frente dos ingredientes por ordem

instalar o zustand npm install zustand

[] = array = lista


###

React Native: Framework para o desenvolvimento de aplicativos móveis.

Expo: Plataforma que simplifica o desenvolvimento de aplicações React Native.

JavaScript: Linguagem de programação utilizada no desenvolvimento.

WhatsApp API: Integração para facilitar o envio dos produtos selecionados para o WhatsApp.